// Code generated by go-bindata. DO NOT EDIT.
// sources:
// test-migrations/1_initial.sql (218B)
// test-migrations/2_record.sql (100B)
// test-migrations/patch/0001_00_initial.sql (218B)
// test-migrations/patch/0002_00_record.sql (100B)

package migrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x0e\x82\x30\x10\x85\xe1\xfd\x9c\xe2\xed\xd0\x98\x9e\x80\x15\x0a\x3b\x12\x15\xe1\x00\x48\x27\x32\xb1\xb6\x13\x5a\x83\xc7\x37\xc4\x68\x74\xe7\xf6\xe5\xfd\xf9\x8c\xc1\xe6\x26\x97\xa9\x4f\x8c\x4e\xc9\x18\x9c\x8e\x35\xc4\x23\xf2\x90\x24\x78\x64\x9d\x66\x90\x08\x7e\xf0\x70\x4f\x6c\x31\x8f\xec\x91\x46\x89\x78\x75\xcb\x49\x22\x7a\x55\x27\x6c\x69\xd7\x54\x45\x5b\xa1\x2d\xb6\x75\x05\xe5\xa0\x8e\xb1\x12\x0b\xf1\x69\x9d\x13\xd1\x37\x58\x86\xd9\xbf\xc9\x8f\xb7\x8c\x7f\x89\x53\x70\x8e\x2d\xce\xfd\x70\xa5\xb2\xd9\x1f\x7e\xcc\x9c\x9e\x01\x00\x00\xff\xff\x0d\x70\x5e\xf9\xda\x00\x00\x00")

func testMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_testMigrations1_initialSql,
		"test-migrations/1_initial.sql",
	)
}

func testMigrations1_initialSql() (*asset, error) {
	bytes, err := testMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-migrations/1_initial.sql", size: 218, mode: os.FileMode(0644), modTime: time.Unix(1587628088, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xc2, 0x93, 0x41, 0x20, 0x34, 0xb6, 0xf3, 0xab, 0x7d, 0xc, 0xfb, 0x53, 0xd6, 0xe9, 0x79, 0x20, 0xfc, 0xf1, 0x92, 0x58, 0x63, 0x1c, 0x88, 0x5f, 0x84, 0x9f, 0x20, 0xbf, 0x9c, 0x8f, 0xf3}}
	return a, nil
}

var _testMigrations2_recordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x28\x48\xcd\x2f\xc8\x49\x55\xd0\xc8\x4c\xd1\x54\x08\x73\xf4\x09\x75\x0d\x56\xd0\x30\xd4\xb4\xe6\xe2\x42\xd6\xe3\x92\x5f\x9e\xc7\xe5\xe2\xea\xe3\x1a\xe2\xaa\xe0\x16\xe4\xef\x0b\xd3\x15\xee\xe1\x1a\xe4\xaa\x90\x99\x62\x6b\x68\xcd\x05\x08\x00\x00\xff\xff\xf4\x3a\x7b\xae\x64\x00\x00\x00")

func testMigrations2_recordSqlBytes() ([]byte, error) {
	return bindataRead(
		_testMigrations2_recordSql,
		"test-migrations/2_record.sql",
	)
}

func testMigrations2_recordSql() (*asset, error) {
	bytes, err := testMigrations2_recordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-migrations/2_record.sql", size: 100, mode: os.FileMode(0644), modTime: time.Unix(1587628088, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x29, 0x42, 0xa3, 0x20, 0xea, 0xe2, 0xeb, 0xb6, 0xb9, 0x3d, 0xa9, 0xd5, 0xb6, 0xc7, 0x2d, 0x19, 0x60, 0x7f, 0x7d, 0x4f, 0xed, 0xc8, 0x86, 0x56, 0x6b, 0xb3, 0x92, 0xc, 0xd8, 0x2d, 0xf6}}
	return a, nil
}

var _testMigrationsPatch0001_00_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x0e\x82\x30\x10\x85\xe1\xfd\x9c\xe2\xed\xd0\x98\x9e\x80\x15\x0a\x3b\x12\x15\xe1\x00\x48\x27\x32\xb1\xb6\x13\x5a\x83\xc7\x37\xc4\x68\x74\xe7\xf6\xe5\xfd\xf9\x8c\xc1\xe6\x26\x97\xa9\x4f\x8c\x4e\xc9\x18\x9c\x8e\x35\xc4\x23\xf2\x90\x24\x78\x64\x9d\x66\x90\x08\x7e\xf0\x70\x4f\x6c\x31\x8f\xec\x91\x46\x89\x78\x75\xcb\x49\x22\x7a\x55\x27\x6c\x69\xd7\x54\x45\x5b\xa1\x2d\xb6\x75\x05\xe5\xa0\x8e\xb1\x12\x0b\xf1\x69\x9d\x13\xd1\x37\x58\x86\xd9\xbf\xc9\x8f\xb7\x8c\x7f\x89\x53\x70\x8e\x2d\xce\xfd\x70\xa5\xb2\xd9\x1f\x7e\xcc\x9c\x9e\x01\x00\x00\xff\xff\x0d\x70\x5e\xf9\xda\x00\x00\x00")

func testMigrationsPatch0001_00_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_testMigrationsPatch0001_00_initialSql,
		"test-migrations/patch/0001_00_initial.sql",
	)
}

func testMigrationsPatch0001_00_initialSql() (*asset, error) {
	bytes, err := testMigrationsPatch0001_00_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-migrations/patch/0001_00_initial.sql", size: 218, mode: os.FileMode(0644), modTime: time.Unix(1587628088, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xc2, 0x93, 0x41, 0x20, 0x34, 0xb6, 0xf3, 0xab, 0x7d, 0xc, 0xfb, 0x53, 0xd6, 0xe9, 0x79, 0x20, 0xfc, 0xf1, 0x92, 0x58, 0x63, 0x1c, 0x88, 0x5f, 0x84, 0x9f, 0x20, 0xbf, 0x9c, 0x8f, 0xf3}}
	return a, nil
}

var _testMigrationsPatch0002_00_recordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x28\x48\xcd\x2f\xc8\x49\x55\xd0\xc8\x4c\xd1\x54\x08\x73\xf4\x09\x75\x0d\x56\xd0\x30\xd4\xb4\xe6\xe2\x42\xd6\xe3\x92\x5f\x9e\xc7\xe5\xe2\xea\xe3\x1a\xe2\xaa\xe0\x16\xe4\xef\x0b\xd3\x15\xee\xe1\x1a\xe4\xaa\x90\x99\x62\x6b\x68\xcd\x05\x08\x00\x00\xff\xff\xf4\x3a\x7b\xae\x64\x00\x00\x00")

func testMigrationsPatch0002_00_recordSqlBytes() ([]byte, error) {
	return bindataRead(
		_testMigrationsPatch0002_00_recordSql,
		"test-migrations/patch/0002_00_record.sql",
	)
}

func testMigrationsPatch0002_00_recordSql() (*asset, error) {
	bytes, err := testMigrationsPatch0002_00_recordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-migrations/patch/0002_00_record.sql", size: 100, mode: os.FileMode(0644), modTime: time.Unix(1587628088, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x29, 0x42, 0xa3, 0x20, 0xea, 0xe2, 0xeb, 0xb6, 0xb9, 0x3d, 0xa9, 0xd5, 0xb6, 0xc7, 0x2d, 0x19, 0x60, 0x7f, 0x7d, 0x4f, 0xed, 0xc8, 0x86, 0x56, 0x6b, 0xb3, 0x92, 0xc, 0xd8, 0x2d, 0xf6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test-migrations/1_initial.sql":             testMigrations1_initialSql,
	"test-migrations/2_record.sql":              testMigrations2_recordSql,
	"test-migrations/patch/0001_00_initial.sql": testMigrationsPatch0001_00_initialSql,
	"test-migrations/patch/0002_00_record.sql":  testMigrationsPatch0002_00_recordSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test-migrations": &bintree{nil, map[string]*bintree{
		"1_initial.sql": &bintree{testMigrations1_initialSql, map[string]*bintree{}},
		"2_record.sql":  &bintree{testMigrations2_recordSql, map[string]*bintree{}},
		"patch": &bintree{nil, map[string]*bintree{
			"0001_00_initial.sql": &bintree{testMigrationsPatch0001_00_initialSql, map[string]*bintree{}},
			"0002_00_record.sql":  &bintree{testMigrationsPatch0002_00_recordSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
