// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres/0001_01_initial_patch.sql (529B)
// postgres/0001_02_inital_market.sql (278B)
// postgres/0001_03_blabla.sql (278B)
// postgres/0002_00_record.sql (625B)
// postgres/0002_01_bddfsgfd.sql (278B)
// sss/0001_00_initial.sql (272B)

package test_bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres0001_01_initial_patchSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4b\xc3\x30\x14\x87\xef\xf9\x2b\x7e\xb7\xad\xe8\x0e\xd3\x8b\xd0\x53\x5c\xdf\x30\x18\xbb\x99\x26\xe2\x4e\xd2\xcd\x20\x43\xbb\x6a\x92\x22\xfd\xef\x85\xb6\xd4\x0a\xa2\xed\x3b\x3e\xbe\x0f\xde\xc7\x5b\x2c\x70\x56\x1c\x5f\x5c\x1e\x2c\xcc\x3b\x5b\x29\xe2\x9a\xa0\xf9\xb5\x24\x88\x35\xd2\x8d\x06\x3d\x8a\x4c\x67\x28\x72\xf7\x6a\x83\x67\x73\x06\x00\xc7\x67\x0c\x27\x23\x25\xb8\xc4\x56\x89\x3b\xae\x76\xb8\xa5\xdd\x79\x83\xf9\xba\xd8\x97\x6f\x3d\xf6\xc0\xd5\xea\x86\xab\xf9\xe5\x45\x04\x93\x8a\x7b\x43\x2d\xb6\xcf\xbd\x7d\x3a\x54\xce\xd9\xd3\xa1\xfe\xc6\xae\xa2\xe6\x80\xd4\x48\x89\x84\xd6\xdc\x48\x8d\xd9\xac\x55\x3e\xaa\x32\x0c\x9c\xbf\x15\x16\xc5\x23\xd2\x96\x7d\x5b\xb0\x3e\x4c\xe8\xfb\x81\x8f\x6a\x6c\x8d\xe9\x9d\x8d\xf7\x7f\x2b\x1b\xbe\x35\x29\x3f\x4f\x2c\x51\x9b\x6d\xd7\xde\xd5\xc6\xbf\xec\x96\x31\xfb\x0a\x00\x00\xff\xff\x53\xa7\xcf\x9f\x11\x02\x00\x00")

func postgres0001_01_initial_patchSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres0001_01_initial_patchSql,
		"postgres/0001_01_initial_patch.sql",
	)
}

func postgres0001_01_initial_patchSql() (*asset, error) {
	bytes, err := postgres0001_01_initial_patchSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/0001_01_initial_patch.sql", size: 529, mode: os.FileMode(0644), modTime: time.Unix(1587638950, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xd7, 0x42, 0xc9, 0xcd, 0x35, 0xf6, 0xe2, 0xfe, 0xb9, 0xb1, 0x8f, 0x69, 0xd2, 0x4f, 0x8, 0x7b, 0xfe, 0xa6, 0x94, 0x48, 0x98, 0xb, 0xfc, 0x2b, 0xbe, 0xcf, 0x5a, 0x23, 0x8d, 0xac, 0xad}}
	return a, nil
}

var _postgres0001_02_inital_marketSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\x4e\x83\x40\x14\x45\xf7\xef\x2b\xee\xae\x25\xda\xcd\xb8\x31\xe9\x6a\x2c\xaf\x71\xe2\x48\xeb\x30\x63\x64\x65\x00\x27\x86\x28\xa0\x03\xc4\xf0\xf7\x26\xa0\x81\x55\xef\xfa\x9c\xe4\x9e\xdd\x0e\x57\x75\xf5\x1e\xf2\xde\xc3\x7d\xd1\xc1\xb0\xb4\x0c\x2b\xef\x34\x43\x1d\x91\x9c\x2c\xf8\x45\xa5\x36\x45\x9d\x87\x0f\xdf\x77\x82\xb6\x04\x00\xd5\x9b\xc0\x7a\x29\x1b\x25\x35\xce\x46\x3d\x4a\x93\xe1\x81\xb3\xeb\x89\xeb\xc6\xba\x68\x3f\x17\xf6\x59\x9a\xc3\xbd\x34\xdb\x1b\x11\xc1\x25\xea\xc9\xf1\xcc\x15\x79\xe7\x5f\xcb\x21\x04\xdf\x94\xa3\x58\xb8\xdb\x68\x3a\x91\x38\xad\x11\xf3\x51\x3a\x6d\xb1\xd9\xcc\xce\xf7\xd0\xf6\x6b\xe9\xb2\x43\xd1\x9e\x68\xdd\x1b\xb7\x3f\x0d\xc5\xe6\x74\xfe\xeb\xfd\x2f\xdc\xd3\x6f\x00\x00\x00\xff\xff\xdc\xc7\x33\x8a\x16\x01\x00\x00")

func postgres0001_02_inital_marketSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres0001_02_inital_marketSql,
		"postgres/0001_02_inital_market.sql",
	)
}

func postgres0001_02_inital_marketSql() (*asset, error) {
	bytes, err := postgres0001_02_inital_marketSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/0001_02_inital_market.sql", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1587548097, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x7a, 0x9f, 0x7, 0x28, 0x42, 0x2f, 0x54, 0xa9, 0x7d, 0x77, 0xc1, 0x36, 0x1f, 0x6e, 0xfb, 0xa8, 0x5f, 0xc, 0x29, 0x4e, 0x17, 0x15, 0xe2, 0x40, 0x1b, 0x19, 0x31, 0x66, 0x8, 0x31, 0x6c}}
	return a, nil
}

var _postgres0001_03_blablaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xc1\x4e\x83\x40\x14\x45\xf7\xef\x2b\xee\xae\x25\xda\x8d\xb3\x31\xe9\x6a\x2c\xaf\x71\xe2\x48\xeb\x30\x63\x64\x65\x00\x27\x86\x28\xa0\x03\xc4\xf0\xf7\x26\xa0\x81\x55\xef\xfa\x9c\xe4\x9e\xdd\x0e\x57\x75\xf5\x1e\xf2\xde\xc3\x7d\xd1\xc1\xb0\xb4\x0c\x2b\xef\x34\x43\x1d\x91\x9c\x2c\xf8\x45\xa5\x36\x45\x9d\x87\x0f\xdf\x77\x82\xb6\x04\x00\xd5\x9b\xc0\x7a\x29\x1b\x25\x35\xce\x46\x3d\x4a\x93\xe1\x81\xb3\xeb\x89\xeb\xc6\xba\x68\x3f\x17\xf6\x59\x9a\xc3\xbd\x34\x5b\x71\x13\xc1\x25\xea\xc9\xf1\xcc\x15\x79\xe7\x5f\xcb\x21\x04\xdf\x94\xa3\x58\xb8\xdb\x68\x3a\x91\x38\xad\x11\xf3\x51\x3a\x6d\xb1\xd9\xcc\xce\xf7\xd0\xf6\x6b\xe9\xb2\x43\xd1\x9e\x68\xdd\x1b\xb7\x3f\x0d\xc5\xe6\x74\xfe\xeb\xfd\x2f\xdc\xd3\x6f\x00\x00\x00\xff\xff\x12\x93\x49\x7a\x16\x01\x00\x00")

func postgres0001_03_blablaSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres0001_03_blablaSql,
		"postgres/0001_03_blabla.sql",
	)
}

func postgres0001_03_blablaSql() (*asset, error) {
	bytes, err := postgres0001_03_blablaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/0001_03_blabla.sql", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1587569403, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xdf, 0x24, 0xf1, 0xf1, 0x12, 0x23, 0xda, 0x69, 0x7c, 0x2a, 0xb9, 0x3, 0x5d, 0x3a, 0xc5, 0x91, 0x7f, 0x67, 0x34, 0x99, 0x97, 0xe, 0x61, 0x99, 0xd8, 0x93, 0x77, 0x36, 0x17, 0xad, 0x83}}
	return a, nil
}

var _postgres0002_00_recordSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x6a\x83\x40\x10\x80\xef\xfb\x14\x73\x53\xa9\xe9\x0b\xe4\xd4\xac\x5b\x0c\x4c\x13\x59\xc7\xe2\xad\xa8\x48\x09\x8d\x31\xf5\x87\x92\xb7\x2f\xd6\x31\xdb\x6c\x36\x5e\xdc\x81\x8f\xf9\xbe\x85\x5d\xad\xe0\xa9\x39\x7c\x76\xc5\x50\x43\x76\x16\xdb\x5d\xaa\x34\xc1\x76\x47\x7b\x38\x8f\xe5\xf1\x50\x3d\x37\x45\xf7\x55\x0f\xbd\xdf\x5f\x9a\xb2\x3d\x86\x50\x16\x7d\xfd\x51\x8d\x5d\x57\x9f\xaa\x4b\x08\xdf\x63\x3b\x98\x39\x10\xef\x2f\x98\xa9\x14\x7c\x6f\x43\x32\x4b\x23\xf2\x42\x98\x8e\xd3\xef\x6f\x0c\x42\x01\xf3\xe7\x7b\x1b\x19\x5f\x11\x19\x3b\x11\x45\x57\x44\x91\x1b\x41\x23\xc2\x07\xa2\x5c\x27\x0b\x92\xeb\xe4\x51\x0b\x67\x72\xca\x34\x59\x25\x0c\x70\x88\x0d\x20\x49\x06\x38\xc3\x06\x72\x9d\x30\xc0\x11\x2e\xc5\x2c\x5f\x14\x32\xbe\x53\xcc\x00\x9a\x56\x5b\x31\x03\x8b\xe2\x7e\x03\xef\x46\x73\x19\x6b\x03\x03\xbc\xc1\x01\xe0\xcd\x2d\xa6\x29\x58\x0b\xf1\xff\x29\x45\xed\xcf\x49\x44\x0a\x15\x29\x78\xd5\xfb\x37\xe0\x57\xb4\x16\xbf\x01\x00\x00\xff\xff\xe4\x9a\x1d\x14\x71\x02\x00\x00")

func postgres0002_00_recordSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres0002_00_recordSql,
		"postgres/0002_00_record.sql",
	)
}

func postgres0002_00_recordSql() (*asset, error) {
	bytes, err := postgres0002_00_recordSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/0002_00_record.sql", size: 625, mode: os.FileMode(0644), modTime: time.Unix(1587481265, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x5e, 0xfd, 0x26, 0xeb, 0xa9, 0x78, 0xb6, 0x42, 0x60, 0xa3, 0xc1, 0xd9, 0xe4, 0xa7, 0x2, 0xdd, 0x6e, 0x66, 0xc9, 0xb5, 0xba, 0x25, 0xe4, 0x3c, 0xe0, 0xcc, 0x7b, 0x57, 0x17, 0xc7, 0xd9}}
	return a, nil
}

var _postgres0002_01_bddfsgfdSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4e\x84\x40\x14\x45\xfb\xf7\x15\xb7\xdb\x25\xba\x8d\x52\x98\x6c\x35\x2e\x6f\xe3\xc4\x11\x70\x98\x31\x52\x19\xc0\x89\x21\x0a\xe8\x00\x31\xfc\xbd\x09\x68\xa0\xf2\xd6\xe7\x24\xf7\x1c\x0e\xb8\x68\xea\x37\x5f\x0c\x0e\xf6\x93\x4e\x9a\x85\x61\x18\x71\xab\x18\xf2\x8c\x38\x31\xe0\x67\x99\x99\x0c\x4d\xe1\xdf\xdd\xd0\x87\xb4\x27\x00\xa8\x5f\x43\x6c\x97\xb1\x96\x42\x21\xd5\xf2\x41\xe8\x1c\xf7\x9c\x5f\xce\x5c\x3f\x35\x65\xf7\xb1\xb2\x4f\x42\x9f\xee\x84\xde\x5f\x5f\x05\xb0\xb1\x7c\xb4\xbc\x70\x65\xd1\xbb\x97\x6a\xf4\xde\xb5\xd5\x14\xae\xdc\x4d\x30\x9f\x88\xad\x52\x88\xf8\x2c\xac\x32\xd8\xed\x16\xe7\x6b\xec\x86\xad\xf4\xbf\x43\xc1\x91\x68\xdb\x1b\x75\xdf\x2d\x45\x3a\x49\x7f\x7b\xff\x0a\x8f\xf4\x13\x00\x00\xff\xff\xbb\x37\xbd\xc6\x16\x01\x00\x00")

func postgres0002_01_bddfsgfdSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres0002_01_bddfsgfdSql,
		"postgres/0002_01_bddfsgfd.sql",
	)
}

func postgres0002_01_bddfsgfdSql() (*asset, error) {
	bytes, err := postgres0002_01_bddfsgfdSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/0002_01_bddfsgfd.sql", size: 278, mode: os.FileMode(0644), modTime: time.Unix(1587570189, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xd3, 0xd, 0xdc, 0x42, 0xfa, 0x4a, 0x27, 0xd1, 0x14, 0xb5, 0x51, 0x97, 0x64, 0x32, 0xa0, 0xa5, 0x44, 0x79, 0x98, 0xf1, 0x82, 0xe7, 0x6f, 0x4c, 0xc7, 0xce, 0x57, 0xd6, 0x1a, 0x11, 0xe9}}
	return a, nil
}

var _sss0001_00_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4b\x85\x40\x18\x45\xf7\xdf\xaf\xb8\xbb\xf7\xa4\xde\xa6\x36\xc1\x5b\x4d\xfa\x49\x43\x93\xda\x38\x13\xb9\x0a\xb5\x21\xa4\xd4\x1a\x95\xf0\xdf\x07\x2a\xe5\xaa\xbb\x3e\x07\xee\x39\x9d\x70\xd1\x36\x6f\xbe\x1c\x1d\xec\x27\x85\x9a\x85\x61\x18\x71\xab\x18\x32\x46\x92\x1a\xf0\xb3\xcc\x4d\x8e\xb6\xf4\xef\x6e\x1c\xe8\x48\x00\xd0\xbc\x62\xbf\x9c\xb5\x14\x0a\x99\x96\x0f\x42\x17\xb8\xe7\xe2\x72\xc1\x86\xb9\xad\xfa\x8f\x5f\xec\x49\xe8\xf0\x4e\xe8\xe3\xf5\x55\x00\x9b\xc8\x47\xcb\x2b\x56\x95\x83\x7b\xa9\x27\xef\x5d\x57\xcf\x7f\xd8\x4d\xb0\x1c\x48\xac\x52\x88\x38\x16\x56\x19\x1c\x0e\xab\xf2\x35\xf5\xe3\xce\xf9\x5f\xa1\xe0\x4c\xb4\x4f\x8d\xfa\xef\x8e\x22\x9d\x66\x5b\xea\x16\x77\xa6\x9f\x00\x00\x00\xff\xff\xc5\x11\xa1\x83\x10\x01\x00\x00")

func sss0001_00_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_sss0001_00_initialSql,
		"sss/0001_00_initial.sql",
	)
}

func sss0001_00_initialSql() (*asset, error) {
	bytes, err := sss0001_00_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sss/0001_00_initial.sql", size: 272, mode: os.FileMode(0644), modTime: time.Unix(1587548140, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xd4, 0x44, 0x8d, 0x8f, 0xe4, 0x8b, 0xc, 0xaf, 0x11, 0x4e, 0xaf, 0xdd, 0xb5, 0x69, 0x61, 0x1d, 0x62, 0x9d, 0xed, 0x77, 0xe7, 0x64, 0xc9, 0xc4, 0xda, 0x88, 0x3, 0xcb, 0xd6, 0x3c, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/0001_01_initial_patch.sql": postgres0001_01_initial_patchSql,
	"postgres/0001_02_inital_market.sql": postgres0001_02_inital_marketSql,
	"postgres/0001_03_blabla.sql":        postgres0001_03_blablaSql,
	"postgres/0002_00_record.sql":        postgres0002_00_recordSql,
	"postgres/0002_01_bddfsgfd.sql":      postgres0002_01_bddfsgfdSql,
	"sss/0001_00_initial.sql":            sss0001_00_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"0001_01_initial_patch.sql": &bintree{postgres0001_01_initial_patchSql, map[string]*bintree{}},
		"0001_02_inital_market.sql": &bintree{postgres0001_02_inital_marketSql, map[string]*bintree{}},
		"0001_03_blabla.sql":        &bintree{postgres0001_03_blablaSql, map[string]*bintree{}},
		"0002_00_record.sql":        &bintree{postgres0002_00_recordSql, map[string]*bintree{}},
		"0002_01_bddfsgfd.sql":      &bintree{postgres0002_01_bddfsgfdSql, map[string]*bintree{}},
	}},
	"sss": &bintree{nil, map[string]*bintree{
		"0001_00_initial.sql": &bintree{sss0001_00_initialSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
